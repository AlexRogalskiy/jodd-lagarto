plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.21.2'
}

repositories {
    mavenCentral()
    mavenLocal()
}

group = 'jodd'
version = '6.0.0-' + timestamp()

sourceCompatibility = 1.8
targetCompatibility = 1.8

rootProject.description = 'Java HTML parsers suite'

ext {
}

java {
    withSourcesJar()
    withJavadocJar()
}

dependencies {
    implementation 'org.jodd:jodd-core:5.1.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

test {
    useJUnitPlatform()
    testLogging {
        events "standardOut", "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

//
// PUBLISH
//

ext.admin = hasProperty('sonatypeUsername')

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { admin }
    sign configurations.archives
}

task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}

//
// RELEASE
//

task release() {
    group 'Project'
    description 'ReBuilds everything for the release.'

    dependsOn clean
    dependsOn build
    dependsOn javadoc
    dependsOn jacocoTestReport
}


//
// UTILS
//

apply from: "${rootProject.projectDir}/gradle/license.gradle"

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

static def timestamp() {
    return new Date().format('yyyyMMddHHmmss')
}
